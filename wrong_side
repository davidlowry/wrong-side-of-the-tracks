#!/usr/bin/env bash

##
## Wrong side of the tracks: Rails on Ubuntu
## Author: Mike Williamson
## Website: www.dexterchief.com
## This is intended to do the heavy lifting to get a working Rails environment from a default Ubuntu install. 
##

aptitude install libnotify-bin;
#libnotify-bin gives us:

#the rest let us use it in ruby:
#requre 'rubygems'
#require 'libnotify'
# Libnotify.show :summary => "Title!", :body => "test"


#Get the Ubuntu version that we are running on.
distro=`cat /etc/issue | awk '{print $1}'`; #returns 'Ubuntu'... or should.
version=`cat /etc/issue | awk '{print $2}'`; #returns something like '9.10'
if [ $distro !=  'Ubuntu' ]; then
  echo 'This script is expecting Ubuntu'; exit 1;
fi
notify-send "You are running $distro $version";


#
#Handle the different versions with a case statment so we can deal with different packages if needed. Right now its mostly the same...
case $version in
'9.10') #Karmic Koala

  notify-send "Downloading and installing now." "Sit tight there is a lot to install."
  echo -e "\r\n\r\nDownloading and installing the software...\r\n\r\n"
  ## aptitude -s = simulate. Great for testing.

  aptitude install --assume-yes build-essential netbeans gedit-plugins vim git-core ruby-full libopenssl-ruby1.8 mysql-server-5.0 mysql-client-5.0 libmysqlclient-dev libsqlite3-dev sqlite3-doc ssl-cert meld python-gtksourceview gitk libxml-ruby1.8 libxslt-ruby1.8 libnotify-ruby libinotify-ruby libgtk2-ruby libnotify-dev || { echo "problem downloading one of the packages"; exit 1; } 

  #ruby-full libopenssl-ruby1.8 
  #was taken out and replaced with:
  #ruby1.8 ruby1.8-dev ri1.8 libreadline-ruby1.8 rdoc1.8 libopenssl-ruby1.8 libgdbm-ruby1.8 libdbm-ruby1.8 irb1.8
  #Explicitly stating what you want is probably a better idea than metapackages especially as versions go by... Still works with Karmic I hope!

;;
'lucid')  ## '10.04') the Alpha version seems not to have a version number yet.

  notify-send "Downloading and installing now." "Sit tight there is a lot to install."
  echo -e "\r\n\r\nDownloading and installing the software...\r\n\r\n"
  ## aptitude -s = simulate. Great for testing.

  aptitude install --assume-yes build-essential netbeans gedit-plugins git-core ruby-full libopenssl-ruby1.8 mysql-server-5.0 mysql-client-5.0 libmysqlclient-dev libsqlite3-dev sqlite3-doc ssl-cert gitk libxml-ruby1.8 libxslt-ruby1.8 libnotify-ruby || { echo "problem downloading one of the packages"; exit 1; } 

;;
*)
   echo "Are you even running Ubuntu?"
;;
esac

#
#The rest if the install is the same for both versions...
#

notify-send "Going to get a fresh ruby-gems." "Downloading the latest version from rubyforge."
echo -e "\r\n\r\nGoing to get a fresh ruby-gems...\r\n\r\n"
cd $HOME
wget http://rubyforge.org/frs/download.php/69365/rubygems-1.3.6.tgz || { echo "Couldn't download ruby-gems!"; exit 1; } 

tar -xvf rubygems-1.3.6.tgz || { echo "tar problems"; exit 1; }
chmod +x rubygems-1.3.6/setup.rb

ruby rubygems-1.3.6/setup.rb

echo -e "\r\n\r\nCleaning up a little...\r\n\r\n"
rm $HOME/rubygems-1.3.6.tgz
rm -Rf $HOME/rubygems-1.3.6

##Create some symlinks so we can use the gem command without whining...

ln -s /usr/bin/gem1.8 /usr/local/bin/gem
ln -s /usr/bin/ruby1.8 /usr/local/bin/ruby
ln -s /usr/bin/rdoc1.8 /usr/local/bin/rdoc
ln -s /usr/bin/ri1.8 /usr/local/bin/ri
ln -s /usr/bin/irb1.8 /usr/local/bin/irb

#Rubygems.org/Gemcutter is the place to get all gems now.
gem install gemcutter

notify-send "Installing gems." "You may want to go have a nap. You may see some errors, but those are just for the documentation so don't worry."

#Feel free to add any gems you want here:
#Will need to think about adding some versions here as well when working on older projects.
gem install mysql taps heroku haml ruby-debug-ide ruby-debug clickatell mongrel mocha authlogic activemerchant haml_scaffold jrails nokogiri sanitize will_paginate nokogiri 


notify-send "Installing Ruby on Rails." "Rails 3 beta is the version that is being installed."
#
#Uncomment the Rails versions you want installed or add others. 
#They will install side by side and you projects will use the one the need (whatever is specified in the environment.rb).
#if you need to create a new project using an old version of rails you need to specify the rails version like this: rails _2.1.0_ projectname

#gem install rails -v 1.2.3 --include-dependencies
#gem install rails -v 2.1 --include-dependencies
#gem install rails -v 2.3.5 --include-dependencies

#Rails 3 beta.
#Rubygems 1.3.6 now handles dependencies in prerelease software so this is all that is needed to install Rails 3 beta now:
gem install rails --pre

echo -e "\r\n\r\nHere are the gems installed:\r\n\r\n"

gem list

notify-send "Welcome to the wrong side of the tracks." "Everything is setup and ready to go. Enjoy."







